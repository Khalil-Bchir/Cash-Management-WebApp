generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)

  // Relationships
  orders Order[]
}

enum Role {
  ADMIN
  USER
}

model Client {
  id        String   @id @default(uuid())
  name      String
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orders Order[]
}

model Product {
  id        String   @id @default(uuid())
  name      String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  orderProducts OrderProduct[]
}

model Order {
  id            String   @id @default(uuid())
  clientId      String
  userId        String
  totalAmount   Float
  handedAmount  Float
  restToPay     Float    @default(0)
  delivered     Boolean  @default(false)
  deleveryDate  DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  client        Client         @relation(fields: [clientId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  orderProducts OrderProduct[]
  payments      Payment[]      // New relation to track payments
}

model OrderProduct {
  id            String   @id @default(uuid())
  quantity      Int
  orderId       String
  productId     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([orderId, productId])
}

model Payment {
  id            String   @id @default(uuid())
  orderId       String
  amount        Float
  paidAt        DateTime @default(now())
  createdAt     DateTime @default(now())

  // Relationships
  order   Order   @relation(fields: [orderId], references: [id])

  @@index([orderId])
}
